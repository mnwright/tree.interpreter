// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// annotateHierarchicalPrediction_randomForest
Rcpp::List annotateHierarchicalPrediction_randomForest(const Rcpp::List rf, const Rcpp::DataFrame oldX);
RcppExport SEXP _tree_interpreter_annotateHierarchicalPrediction_randomForest(SEXP rfSEXP, SEXP oldXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type rf(rfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type oldX(oldXSEXP);
    rcpp_result_gen = Rcpp::wrap(annotateHierarchicalPrediction_randomForest(rf, oldX));
    return rcpp_result_gen;
END_RCPP
}
// annotateHierarchicalPrediction_ranger
Rcpp::List annotateHierarchicalPrediction_ranger(const Rcpp::List rf, const Rcpp::DataFrame oldX);
RcppExport SEXP _tree_interpreter_annotateHierarchicalPrediction_ranger(SEXP rfSEXP, SEXP oldXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type rf(rfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type oldX(oldXSEXP);
    rcpp_result_gen = Rcpp::wrap(annotateHierarchicalPrediction_ranger(rf, oldX));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tree_interpreter_annotateHierarchicalPrediction_randomForest", (DL_FUNC) &_tree_interpreter_annotateHierarchicalPrediction_randomForest, 2},
    {"_tree_interpreter_annotateHierarchicalPrediction_ranger", (DL_FUNC) &_tree_interpreter_annotateHierarchicalPrediction_ranger, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tree_interpreter(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
